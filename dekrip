#include <iostream>
#include <fstream>
#include <cstring>

using namespace std;

char mod[94] = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '-', '+', '=', '{', '}', 
    '[', ']', '<', '>', '.', ',', ';', '"', '\'', '`', '\\', '/', '?', ':', '~', ' '
};

// Fungsi untuk menghitung invers modulo
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // tidak ada invers modulo yang valid
}

// Fungsi untuk menghitung determinan matriks 2x2
int determinant(int key[2][2]) {
    return key[0][0] * key[1][1] - key[0][1] * key[1][0];
}

// Fungsi untuk melakukan dekripsi Hill Cipher
void hill_cipher_decrypt(const char* encrypted_text, const int key[2][2], char* decrypted_text) {
    int n = 2; // Ukuran matriks kunci
    int det = determinant(key); // Menghitung determinan matriks kunci
    int inv_det = modInverse(det, 94); // Menghitung invers dari determinan

    // Menghitung matriks kunci invers
    int inv_key[2][2] = {
        {key[1][1], -key[0][1]},
        {-key[1][0], key[0][0]}
    };

    // Menyesuaikan nilai modulo agar tidak negatif
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            inv_key[i][j] = (inv_key[i][j] * inv_det) % 94;
            if (inv_key[i][j] < 0) {
                inv_key[i][j] += 94;
            }
        }
    }

    size_t len = strlen(encrypted_text); // Panjang teks terenkripsi

    // Melakukan deskripsi pada setiap blok teks
    for (size_t i = 0; i < len; i += n) {
        const char* block = encrypted_text + i;

        int result[2] = {0};

        // Perkalian matriks
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < n; ++k) {
                result[j] += inv_key[j][k] * static_cast<int>(block[k] - ' '); 
            }
            result[j] = (result[j] % 94 + 94) % 94; // Menggunakan modulus 94 untuk menghindari integer overflow
        }

        // Konversi hasil deskripsi ke karakter
        for (int j = 0; j < n; ++j) {
            decrypted_text[i + j] = static_cast<char>(result[j] + ' ');
        }
    }
    decrypted_text[len] = '\0'; // Menambahkan null terminator pada string hasil deskripsi
}

// Fungsi untuk membaca file dan melakukan dekripsi Hill Cipher
void decryptFromFile(const char* filename, int key[2][2]) {
    ifstream file(filename);
    if (file.is_open()) {
        string line;
        getline(file, line); // Baca plaintext dari file
        const char* plaintext = line.c_str();

        getline(file, line); // Baca encrypted text dari file
        const char* encrypted_text = line.c_str();

        char decrypted_text[1000];
        hill_cipher_decrypt(encrypted_text, key, decrypted_text);

        const char* decrypted_filename = "decryption_file.txt";
        ofstream decrypted_file(decrypted_filename);
        if (decrypted_file.is_open()) {
            decrypted_file << "Plaintext: " << plaintext << '\n';
            decrypted_file << "Decrypted Text: " << decrypted_text << '\n';
            cout << "Decrypted data has been saved to " << decrypted_filename << std::endl;
            decrypted_file.close();
        } else {
            cerr << "Error: Unable to open the decrypted file." << std::endl;
        }

        file.close();
    } else {
        cerr << "Error: Unable to open the file." << std::endl;
    }
}

int main() {
    int static_key[2][2] = { // ini adalah matriks statis 2x2
        {2, 1}, {3, 4} // ini adalah kunci matriks 
    };

    const char* filename = "encryption_file.txt";
    decryptFromFile(filename, static_key);

    return 0;
}
